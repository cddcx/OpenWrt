name: 22.03

on:
  workflow_dispatch:
    inputs:
      manual:
        description: '手动触发一次编译'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-22.03
  CONFIG_FILE: .config
  DIY_P1_SH: diy/22.03.sh
  DIY_P2_SH: diy/diy2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

obs:
  build:
    runs-on: Ubuntu-22.04
    
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: ["${{ github.event.client_payload.target }}"]

    steps:
    - name: 准备结束
      uses: actions/checkout@main
      
    - name: Load Settings.ini
      run: |
        echo ${{matrix.target}}
        source "${GITHUB_WORKSPACE}/devices/common/settings.ini"
        if [ -f "devices/${{matrix.target}}/settings.ini" ]; then
          source "${GITHUB_WORKSPACE}/devices/${{matrix.target}}/settings.ini"
        fi
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_SH=${DIY_SH}" >> $GITHUB_ENV
        echo "FREE_UP_DISK=${FREE_UP_DISK}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR_FOR_ARTIFACT=${UPLOAD_BIN_DIR_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_COWTRANSFER=${UPLOAD_FIRMWARE_TO_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_WETRANSFER=${UPLOAD_FIRMWARE_TO_WETRANSFER}" >> $GITHUB_ENV
        sed -i "1a TARGET=${{matrix.target}}" ${GITHUB_WORKSPACE}/devices/common/diy.sh
        if [ ${{matrix.target}} == "x86_64" ]; then
            echo "ARCH=linux/amd64" >> $GITHUB_ENV
            echo "MTARGET=x86_64" >> $GITHUB_ENV
        fi
        
    - name: Trigger Packages Update
      continue-on-error: true
      run: |
        gitdate=$(curl -s "https://api.github.com/repos/kiddin9/openwrt-packages/actions/runs" | jq -r '.workflow_runs[0].created_at')
        gitdate=$(date -d "$gitdate" +%s)
        now=$(date -d "$(date)" +%s)
        if [[ $(expr $gitdate + 300) < $now ]]; then
          curl -X POST https://api.github.com/repos/kiddin9/openwrt-packages/dispatches \
            -H "Accept: application/vnd.github.everest-preview+json" \
          --data '{"event_type": "update"}'
        fi

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ( sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
        git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev device-tree-compiler
        sudo -E apt-get -qq purge azure-cli ghc* zulu* llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean ) &
        sudo timedatectl set-timezone "$TZ"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ //')" || true
        [ "$VERSION" ] && echo "VERSION=$VERSION" >> $GITHUB_ENV || echo "VERSION=$(date +'%m.%d')" >> $GITHUB_ENV
        
    - name: 拉取openwrt源码
      run: |
        if [ "${{matrix.target}}" == "ipq807x_ipq60xx" ]; then
            git clone https://github.com/gl-inet/gl-infra-builder.git
            cd gl-infra-builder
            python3 setup.py -c configs/config-wlan-ap.yml
            ln -sf gl-infra-builder/wlan-ap/openwrt ../openwrt
            cd -
        elif [ "${{matrix.target}}" == "mediatek_gl_mt7981" ]; then
            git clone https://github.com/gl-inet/gl-infra-builder.git
            cd gl-infra-builder
            python3 setup.py -c configs/config-mt798x-7.6.6.1.yml
            ln -sf gl-infra-builder/mt7981 ../openwrt
            cd -
        else
            git clone $REPO_URL -b ${{ env.REPO_BRANCH }} openwrt
            echo "git clone $REPO_URL -b ${{ env.REPO_BRANCH }} openwrt"
        fi
        
    - name: Load custom configuration
      run: |
        cp -rf devices/common/. openwrt/
        cp -rf devices/${{matrix.target}}/. openwrt/
        cp -rf devices openwrt/
        cd openwrt
        chmod +x devices/common/$DIY_SH
        /bin/bash "devices/common/$DIY_SH"
        if [ -f "devices/${{matrix.target}}/$DIY_SH" ]; then
          chmod +x devices/${{matrix.target}}/$DIY_SH
          echo "/bin/bash devices/${{matrix.target}}/$DIY_SH"
          /bin/bash "devices/${{matrix.target}}/$DIY_SH"
        fi
        cp -Rf ./diy/* ./ || true
        if [ -f "devices/${{matrix.target}}/default-settings" ]; then
          echo >> package/*/*/my-default-settings/files/etc/uci-defaults/99-default-settings
          cat devices/${{matrix.target}}/default-settings >> package/*/*/my-default-settings/files/etc/uci-defaults/99-default-settings
        fi
        cp -f devices/common/$CONFIG_FILE .config
        if [ -f "devices/${{matrix.target}}/$CONFIG_FILE" ]; then
          echo >> .config
          cat devices/${{matrix.target}}/$CONFIG_FILE >> .config
        fi

    - name: Apply patches
      run: |
        cd openwrt
        find "devices/common/patches" -type f ! -name 'china_mirrors.patch' -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -B --merge -p1 -E --forward"
        #git apply devices/common/patches/*.patch
        if [ -n "$(ls -A "devices/${{matrix.target}}/patches" 2>/dev/null)" ]; then
          find "devices/${{matrix.target}}/patches" -maxdepth 1 -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -B --merge -p1 -E --forward"
          #git apply devices/${{matrix.target}}/patches/*.patch
        fi
        sed -i '$a  \
        CONFIG_CPU_FREQ_GOV_POWERSAVE=y \
        CONFIG_CPU_FREQ_GOV_USERSPACE=y \
        CONFIG_CPU_FREQ_GOV_ONDEMAND=y \
        CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y \
        CONFIG_CRYPTO_CHACHA20_NEON=y \
        CONFIG_CRYPTO_CHACHA20POLY1305=y \
        CONFIG_FAT_DEFAULT_IOCHARSET="utf8" \
        ' `find target/linux -path "target/linux/*/config-*"`
        
    - name: Defconfig
      run: |
        cd openwrt
        make defconfig
        cat .config
        
    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j$(($(nproc)+1)) &
        sleep 5
    - name: Cache
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        clean: ${{ contains(github.event.action, 'nocache') }}
        prefix: ${{ github.workspace }}/openwrt
        
    - name: Check space usage
      run: |
        shopt -s extglob
        rm -rf openwrt/staging_dir/!(*${{ env.MTARGET }}*|host|hostpkg) openwrt/build_dir/!(*${{ env.MTARGET }}*|host|hostpkg)
        df -hT

    - name: Compile the firmware
      id: compile
      run: |
        shopt -s extglob
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s || (curl -k --data chat_id="${{ env.TELEGRAM_CHAT_ID }}" --data "text=❌ OpenWrt ${{ env.VERSION }} ${{matrix.target}} 编译失败 😂" "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage";exit 1)
        sed -i "s/# CONFIG_IB is not set/CONFIG_IB=y/" .config
        rm -rf staging_dir/toolchain-*/bin/*openwrt-linux-musl-lto-dump
        rm -rf staging_dir/toolchain-*/initial

    - name: 编译固件
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) || make -j1 || make -j1 V=s
        sed -i "s/# CONFIG_IB is not set/CONFIG_IB=y/" .config
        rm -rf staging_dir/toolchain-*/bin/*openwrt-linux-musl-lto-dump
        rm -rf staging_dir/toolchain-*/initial
        
    - name: 整理文件
      id: organize
      run: |
        shopt -s extglob
        mkdir -p firmware/${{matrix.target}}
        cd openwrt; kernel_v="$(make --file=info.mk kernel_version)"; cd -
        cp -rf openwrt/bin/targets/*/*/*{combined,sysupgrade}* ./firmware/${{matrix.target}}/ || true
        cd openwrt/bin/targets/*/*/
        mv -f profiles.json profiles.json.b || true
        cp $GITHUB_WORKSPACE/openwrt/.config ${{matrix.target}}.config || true
        cp $GITHUB_WORKSPACE/openwrt/build_dir/target-*/linux-*/linux-*/.config ${{matrix.target}}_kernel.config || true
        mv -f packages $kernel_v
        ln -sf $kernel_v packages
        cd -
        rename -v "s/openwrt-/${{ env.VERSION }}-openwrt-/" ./firmware/*/* || true
        rename -v "s/friendlyarm_//" ./firmware/*/*gz || true
        rename -v "s/embedfire_//" ./firmware/*/*gz || true
        rename -v "s/xiaomi_redmi-router/redmi/" ./firmware/*/*bin || true
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        echo "EMOJI=${Emoji[$[$RANDOM % ${#Emoji[@]}]]}" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        
    - name: 上传固件
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
